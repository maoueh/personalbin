#!/usr/bin/env ruby

require 'fileutils'
require 'pathname'
require 'rclid/base'

class SyncEclipsePreferences < Rclid::Base
  @@DEFAULT_EXCLUSION = /^(runtime|excluded)/
  @@DEFAULT_MASTER = "preferences"
  @@DEFAULT_WORKSPACES_DIR = "~/Workspaces"

  def initialize(arguments = ARGV, options = {})
    super(arguments, options)

    @dry_run = true
    @exclusion = @@DEFAULT_EXCLUSION
    @master = @@DEFAULT_MASTER
    @workspaces_dir = @@DEFAULT_WORKSPACES_DIR
  end

  def name()
    "sync_eclipse_preferences"
  end

  def usage()
    "usage: #{name()} (options) [<workspace> ...]"
  end

  def description()
    <<-EOD
      Command that sync Eclipse preferences across various workspaces
      so that you don't need to do this manually. To work correctly, the
      script assumes all your workspace directories are located under a
      common folder (defaults to #{@workspaces_dir}). In this directory,
      the script expects a master workspace (defaults to #{@master}) from
      where Eclipse preferences are copied.

      Each folder in the workspaces directory are "slave" repositories
      which you want to sync with the master one. All "slave" directories
      in folder `excluded` or starting with `runtime` are filtered out (i.e
      they are not synced).

      Without arguments, the script sync all slaves it found. You can also
      sync specific "slave" by specifying them on the as arguments on
      the command line.
    EOD
  end

  def options(parser)
    parser.on_tail("-f", "--force", "Run the command in normal mode") do
      @dry_run = false
    end

    parser.on_tail("-n", "--[no-]dry-run", "Run the command in dry mode, without changing anything on disk") do |dry_run|
      @dry_run = dry_run
    end

    parser.on_tail("-m", "--master NAME", "Master workspace name preferences are copied from, defaults to '#{@master}'") do |master|
      @master = master
    end

    parser.on_tail("-w", "--workspaces DIR", "Directory where workspaces are located, defaults to '#{@workspaces_dir}'") do |workspaces_dir|
      @workspaces_dir = workspaces_dir
    end

    super(parser)
  end

  def execute()
    sync()
  end

  def sync()
    preferences_dir = get_preferences_dir()
    workspaces_dir = File.expand_path(@workspaces_dir)
    master_workspace_dir = "#{workspaces_dir}/#{@master}"
    master_preferences_dir = "#{master_workspace_dir}/#{preferences_dir}"

    error("Workspaces directory '#{@workspaces_dir}' does not exists.") if !File.exists?(workspaces_dir)
    error("Master workspace '#{@master}' could not be found at '#{master_workspace_dir}'") if !File.exists?(master_workspace_dir)
    error("Master workspace preferences could not be found at '#{master_preferences_dir}'") if !File.exists?(master_preferences_dir)

    header = "Syncing preferences (Master '#{@master}')"
    header += " | Dry run" if @dry_run

    puts header
    slaves().each do |slave|
      puts " Slave '#{slave}'"
      next if @dry_run

      slave_preferences_dir = File.expand_path("#{@workspaces_dir}/#{slave}/#{preferences_dir}")
      FileUtils.mkpath(slave_preferences_dir)
      Pathname.new(master_preferences_dir).children.each do |child|
        FileUtils.cp_r(child, slave_preferences_dir)
      end
    end
  end

  def slaves()
    directory = File.expand_path(@workspaces_dir)
    slaves = Pathname.new(directory).children.select do |child|
      basepath = get_basepath(directory, child)

      child.directory? && basepath !~ @exclusion && basepath != @master
    end

    slaves.map! do |slave|
      get_basepath(directory, slave)
    end

    slaves.select do |slave|
      @arguments.empty? || @arguments.include?(slave)
    end
  end

  def get_basepath(directory, entry)
    basepath = entry.to_s().sub(directory, "")
    basepath = basepath[1..-1] if basepath.start_with?("/") or basepath.start_with?("\\")

    basepath
  end

  def get_preferences_dir()
    ".metadata/.plugins/org.eclipse.core.runtime/.settings"
  end
end

SyncEclipsePreferences.new(ARGV).run()
